
local common = require('ilk.common')
local cppcom = require("ilk.backend.eigen.common")
local backend= require("ilk.backend.eigen.backend-symbols")
local tpl    = require("template-text").template_eval

local M = {}



local modelConstsStructDef = function(context)
  local env = {
    struct = cppcom.typeString("ModelConstants"),
    modelValues = context.modelValues,
    pose_t = cppcom.typeString( common.metatypes.pose, {nsQualified=true} ),
    sorted = common.alphabPairs,
  }
  local ok,res = tpl([[
struct «struct»
{
    «struct»();

    @for k,_ in sorted(modelValues.poses) do
    «pose_t» «k»;
    @end
};
]], env, {xtendStyle=true, returnTable=true})
  return res
end


M.generator = function(context, programs)
  local env = {
    date = os.date("!%c"),
    incGuard = string.upper(context.outer.robotName),
    ns = context.namespace,
    consts = modelConstsStructDef(context.outer),
    signatures = {}
  }
  for i,prog in ipairs(programs) do
    env.signatures[i] = prog.signature.toString( {declaration=true} )
  end

  --print(env.consts)
  local ok, res = tpl(
[[
/*
 * Header code generated by the ILK-compiler, C++/Eigen backend
 * File generated on: «date» (UTC)
 *
 * License: BSD 2-clause
 */
#ifndef _KINGEN_«incGuard»_H_
#define _KINGEN_«incGuard»_H_

#include <ilk/eigen/core-types.h>
#include <ilk/eigen/joint-transforms.h>
#include <ilk/eigen/ik.h>
#include <ilk/eigen/operators.h>
#include "robot-defs.h"

${ns.open()}

${consts}

@for i,s in ipairs(signatures) do
«s»
@end

${ns.close()}

#endif
]], env, {verbose=true, xtendStyle=true})

  return res
end


M.robot_defs = function(context, programs)
  local env = {
    date = os.date("!%c"),
    incGuard = string.upper(context.outer.robotName),
    ns = context.namespace,
    dofs = context.outer.jointSpaceSize,
    matrix_t = function(r,c) return cppcom.backendNS.qualifier().."::"..backend.matrixT(r,c) end,
    jacobian_t = cppcom.typeString(common.metatypes.jacobian)
  }

  local template =
[[
/*
 * Header code generated by the ILK-compiler, C++/Eigen backend
 * File generated on: «date» (UTC)
 *
 * License: BSD 2-clause
 */
#ifndef _KINGEN_«incGuard»_ROBOTDEFS_H_
#define _KINGEN_«incGuard»_ROBOTDEFS_H_

#include <ilk/eigen/core-types.h>

${ns.open()}

constexpr unsigned int dofs_count = «dofs»;
typedef «matrix_t("dofs_count", 1)» joint_state;

typedef «matrix_t(6, "dofs_count")» «jacobian_t»;

${ns.close()}

#endif
]]
  return common.tplEval_failOnError(template,env,{verbose=true, xtendStyle=true})
end

return M
