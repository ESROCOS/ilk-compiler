/*
 * Source code generated by the ILK-compiler, C++/Eigen backend
 * File generated on: Thu Dec 20 14:37:07 2018 (UTC)
 */
#include "ur5.h"
#include <ilk/eigen/gjac.h>
#include <ilk/eigen/ctransforms.h>

using namespace kul;

ur5::ModelConstants::ModelConstants()
{
    fr_elbow__fr_upper_arm.setIdentity();
    eg_set_position(fr_elbow__fr_upper_arm,0.425,0,-0.1197);
    eg_set_rotation(fr_elbow__fr_upper_arm,1,-0,0,
                                 0,1,-0,
                                 0,0,1);

    fr_shoulder_lift__fr_shoulder.setIdentity();
    eg_set_position(fr_shoulder_lift__fr_shoulder,0.13585,0,0);
    eg_set_rotation(fr_shoulder_lift__fr_shoulder,0,-0,1,
                                 -0,-1,0,
                                 1,-0,-0);

    fr_shoulder_pan__fr_base.setIdentity();
    eg_set_position(fr_shoulder_pan__fr_base,0,0,0.089159);
    eg_set_rotation(fr_shoulder_pan__fr_base,1,-0,0,
                                 0,1,-0,
                                 0,0,1);

    fr_wr1__fr_forearm.setIdentity();
    eg_set_position(fr_wr1__fr_forearm,0.39225,0,0.09315);
    eg_set_rotation(fr_wr1__fr_forearm,1,-0,0,
                                 0,1,-0,
                                 0,0,1);

    fr_wr2__fr_wrist_1.setIdentity();
    eg_set_position(fr_wr2__fr_wrist_1,0.09475,0,0);
    eg_set_rotation(fr_wr2__fr_wrist_1,0,-0,1,
                                 -0,-1,0,
                                 1,-0,-0);

    fr_wr3__fr_wrist_2.setIdentity();
    eg_set_position(fr_wr3__fr_wrist_2,0.0825,0,0);
    eg_set_rotation(fr_wr3__fr_wrist_2,-0,0,1,
                                 0,1,0,
                                 -1,0,-0);

}

void ur5::fk1(const ModelConstants& mc, const joint_state& q, kul::pose_t& fr_wrist_3__fr_base)
{
    pose_t fr_forearm__fr_elbow;
    pose_t fr_shoulder__fr_shoulder_pan;
    pose_t fr_upper_arm__fr_shoulder_lift;
    pose_t fr_wrist_1__fr_wr1;
    pose_t fr_wrist_2__fr_wr2;
    pose_t fr_wrist_3__fr_wr3;

    rot_z__a_x_b(q(2), fr_forearm__fr_elbow);
    rot_z__a_x_b(q(0), fr_shoulder__fr_shoulder_pan);
    rot_z__a_x_b(q(1), fr_upper_arm__fr_shoulder_lift);
    rot_z__a_x_b(q(3), fr_wrist_1__fr_wr1);
    rot_z__a_x_b(q(4), fr_wrist_2__fr_wr2);
    rot_z__a_x_b(q(5), fr_wrist_3__fr_wr3);

    pose_t fr_wrist_3__fr_wrist_2 = mc.fr_wr3__fr_wrist_2 * fr_wrist_3__fr_wr3;
    pose_t fr_wrist_3__fr_wr2 = fr_wrist_2__fr_wr2 * fr_wrist_3__fr_wrist_2;
    pose_t fr_wrist_3__fr_wrist_1 = mc.fr_wr2__fr_wrist_1 * fr_wrist_3__fr_wr2;
    pose_t fr_wrist_3__fr_wr1 = fr_wrist_1__fr_wr1 * fr_wrist_3__fr_wrist_1;
    pose_t fr_wrist_3__fr_forearm = mc.fr_wr1__fr_forearm * fr_wrist_3__fr_wr1;
    pose_t fr_wrist_3__fr_elbow = fr_forearm__fr_elbow * fr_wrist_3__fr_forearm;
    pose_t fr_wrist_3__fr_upper_arm = mc.fr_elbow__fr_upper_arm * fr_wrist_3__fr_elbow;
    pose_t fr_wrist_3__fr_shoulder_lift = fr_upper_arm__fr_shoulder_lift * fr_wrist_3__fr_upper_arm;
    pose_t fr_wrist_3__fr_shoulder = mc.fr_shoulder_lift__fr_shoulder * fr_wrist_3__fr_shoulder_lift;
    pose_t fr_wrist_3__fr_shoulder_pan = fr_shoulder__fr_shoulder_pan * fr_wrist_3__fr_shoulder;
    fr_wrist_3__fr_base = mc.fr_shoulder_pan__fr_base * fr_wrist_3__fr_shoulder_pan;


}



void ur5::fk2(const ModelConstants& mc, const joint_state& q, kul::pose_t& fr_forearm__fr_base)
{
    pose_t fr_forearm__fr_elbow;
    pose_t fr_shoulder__fr_shoulder_pan;
    pose_t fr_upper_arm__fr_shoulder_lift;

    rot_z__a_x_b(q(2), fr_forearm__fr_elbow);
    rot_z__a_x_b(q(0), fr_shoulder__fr_shoulder_pan);
    rot_z__a_x_b(q(1), fr_upper_arm__fr_shoulder_lift);

    pose_t fr_forearm__fr_upper_arm = mc.fr_elbow__fr_upper_arm * fr_forearm__fr_elbow;
    pose_t fr_forearm__fr_shoulder_lift = fr_upper_arm__fr_shoulder_lift * fr_forearm__fr_upper_arm;
    pose_t fr_forearm__fr_shoulder = mc.fr_shoulder_lift__fr_shoulder * fr_forearm__fr_shoulder_lift;
    pose_t fr_forearm__fr_shoulder_pan = fr_shoulder__fr_shoulder_pan * fr_forearm__fr_shoulder;
    fr_forearm__fr_base = mc.fr_shoulder_pan__fr_base * fr_forearm__fr_shoulder_pan;


}



void ur5::fk__ik1(const ModelConstants& mc, const joint_state& q, kul::pose_t& fr_wrist_3__fr_base, Jacobian_t& J_fr_wrist_3_fr_base)
{
    pose_t fr_forearm__fr_elbow;
    pose_t fr_shoulder__fr_shoulder_pan;
    pose_t fr_upper_arm__fr_shoulder_lift;
    pose_t fr_wrist_1__fr_wr1;
    pose_t fr_wrist_2__fr_wr2;
    pose_t fr_wrist_3__fr_wr3;

    rot_z__a_x_b(q(2), fr_forearm__fr_elbow);
    rot_z__a_x_b(q(0), fr_shoulder__fr_shoulder_pan);
    rot_z__a_x_b(q(1), fr_upper_arm__fr_shoulder_lift);
    rot_z__a_x_b(q(3), fr_wrist_1__fr_wr1);
    rot_z__a_x_b(q(4), fr_wrist_2__fr_wr2);
    rot_z__a_x_b(q(5), fr_wrist_3__fr_wr3);

    pose_t fr_shoulder_lift__fr_shoulder_pan = fr_shoulder__fr_shoulder_pan * mc.fr_shoulder_lift__fr_shoulder;
    pose_t fr_shoulder_lift__fr_base = mc.fr_shoulder_pan__fr_base * fr_shoulder_lift__fr_shoulder_pan;
    pose_t fr_elbow__fr_shoulder_lift = fr_upper_arm__fr_shoulder_lift * mc.fr_elbow__fr_upper_arm;
    pose_t fr_elbow__fr_base = fr_shoulder_lift__fr_base * fr_elbow__fr_shoulder_lift;
    pose_t fr_wr1__fr_elbow = fr_forearm__fr_elbow * mc.fr_wr1__fr_forearm;
    pose_t fr_wr1__fr_base = fr_elbow__fr_base * fr_wr1__fr_elbow;
    pose_t fr_wr2__fr_wr1 = fr_wrist_1__fr_wr1 * mc.fr_wr2__fr_wrist_1;
    pose_t fr_wr2__fr_base = fr_wr1__fr_base * fr_wr2__fr_wr1;
    pose_t fr_wr3__fr_wr2 = fr_wrist_2__fr_wr2 * mc.fr_wr3__fr_wrist_2;
    pose_t fr_wr3__fr_base = fr_wr2__fr_base * fr_wr3__fr_wr2;
    fr_wrist_3__fr_base = fr_wr3__fr_base * fr_wrist_3__fr_wr3;

    position_t poi_J_fr_wrist_3_fr_base = eg_get_position(fr_wrist_3__fr_base);

    geometricJacobianColumn_revolute(
      poi_J_fr_wrist_3_fr_base,
      eg_get_position(mc.fr_shoulder_pan__fr_base),
      eg_get_zaxis(mc.fr_shoulder_pan__fr_base),
      J_fr_wrist_3_fr_base.col(0) );
    geometricJacobianColumn_revolute(
      poi_J_fr_wrist_3_fr_base,
      eg_get_position(fr_shoulder_lift__fr_base),
      eg_get_zaxis(fr_shoulder_lift__fr_base),
      J_fr_wrist_3_fr_base.col(1) );
    geometricJacobianColumn_revolute(
      poi_J_fr_wrist_3_fr_base,
      eg_get_position(fr_elbow__fr_base),
      eg_get_zaxis(fr_elbow__fr_base),
      J_fr_wrist_3_fr_base.col(2) );
    geometricJacobianColumn_revolute(
      poi_J_fr_wrist_3_fr_base,
      eg_get_position(fr_wr1__fr_base),
      eg_get_zaxis(fr_wr1__fr_base),
      J_fr_wrist_3_fr_base.col(3) );
    geometricJacobianColumn_revolute(
      poi_J_fr_wrist_3_fr_base,
      eg_get_position(fr_wr2__fr_base),
      eg_get_zaxis(fr_wr2__fr_base),
      J_fr_wrist_3_fr_base.col(4) );
    geometricJacobianColumn_revolute(
      poi_J_fr_wrist_3_fr_base,
      eg_get_position(fr_wr3__fr_base),
      eg_get_zaxis(fr_wr3__fr_base),
      J_fr_wrist_3_fr_base.col(5) );
}



void ur5::ik1(const ModelConstants& mc, const joint_state& q, const kul::vector3_t& v, joint_state& q_ik)
{
    pose_t fk_solution;
    Jacobian_t J;
    fk__ik1(mc, q, fk_solution, J);
    kul::Matrix<3,6> aux = J.template block<3,6>(kul::LX,0);
    kul::leastSquaresSolve(aux, v, q_ik);
}

void ur5::ik2(const ModelConstants& mc, const kul::ik_pos_cfg& cfg, const kul::position_t& desp, const kul::rot_m_t& deso, const joint_state& q_guess, joint_state& q_ik, kul::ik_pos_dbg& dbg)
{
    using namespace std;
    kul::position_t ee_err_pos;
    double ep = cfg.eps_pos_err_norm*10;
    kul::AxisAngle ee_err_or;
    double eo = cfg.eps_or_err_norm*10;

    kul::twist_t ik_twist(kul::twist_t::Zero());
    ur5::Jacobian_t J;
    kul::pose_t fk_solution;
    ur5::joint_state qd;
    q_ik = q_guess;

    dbg.iter_count = 0;
    Matrix<3,3> R;

    while( (ep > cfg.eps_pos_err_norm || eo > cfg.eps_or_err_norm) && dbg.iter_count < cfg.max_iter)
    {
        fk__ik1(mc, q_ik, fk_solution, J);
        R = kul::eg_get_rotation(fk_solution);
        ee_err_or  = kul::orientationDistance(deso, R);
        angularCoords(ik_twist ) = R * (ee_err_or.axis * std::sin(ee_err_or.angle)/cfg.dt);
        ee_err_pos = desp - kul::eg_get_position(fk_solution);
        linearCoords( ik_twist ) = ee_err_pos / cfg.dt;
        kul::leastSquaresSolve(J, ik_twist, qd);
        q_ik += qd * cfg.dt;
        ep = ee_err_pos.norm();
        eo = std::abs(ee_err_or.angle);
        dbg.iter_count++;
    }
    dbg.actual_pos = kul::eg_get_position(fk_solution);
    dbg.actual_or  = kul::eg_get_rotation(fk_solution);
}

