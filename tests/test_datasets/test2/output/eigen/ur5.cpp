/*
 * Source code generated by the ILK-compiler, C++/Eigen backend
 * File generated on: Wed Apr 10 10:10:34 2019 (UTC)
 */
#include "ur5.h"
#include <ilk/eigen/gjac.h>
#include <ilk/eigen/ctransforms.h>

using namespace kul;

ur5::ModelConstants::ModelConstants()
{
    elbow__upperarm.setIdentity();
    eg_set_position(elbow__upperarm,0.425,0,-0.1197);
    eg_set_rotation(elbow__upperarm,1,-0,0,
                                 0,1,-0,
                                 0,0,1);

    forearm__wr1.setIdentity();
    eg_set_position(forearm__wr1,-0.39225,0,-0.09315);
    eg_set_rotation(forearm__wr1,1,-0,0,
                                 0,1,-0,
                                 0,0,1);

    shoulder__shoulder_lift.setIdentity();
    eg_set_position(shoulder__shoulder_lift,0,0,-0.13585);
    eg_set_rotation(shoulder__shoulder_lift,0,-0,1,
                                 -0,-1,0,
                                 1,-0,-0);

    shoulder_lift__shoulder.setIdentity();
    eg_set_position(shoulder_lift__shoulder,0.13585,0,0);
    eg_set_rotation(shoulder_lift__shoulder,0,-0,1,
                                 -0,-1,0,
                                 1,-0,-0);

    shoulder_pan__base.setIdentity();
    eg_set_position(shoulder_pan__base,0,0,0.089159);
    eg_set_rotation(shoulder_pan__base,1,-0,0,
                                 0,1,-0,
                                 0,0,1);

    upperarm__elbow.setIdentity();
    eg_set_position(upperarm__elbow,-0.425,0,0.1197);
    eg_set_rotation(upperarm__elbow,1,-0,0,
                                 0,1,-0,
                                 0,0,1);

    wr1__forearm.setIdentity();
    eg_set_position(wr1__forearm,0.39225,0,0.09315);
    eg_set_rotation(wr1__forearm,1,-0,0,
                                 0,1,-0,
                                 0,0,1);

    wr2__wrist_1.setIdentity();
    eg_set_position(wr2__wrist_1,0.09475,0,0);
    eg_set_rotation(wr2__wrist_1,0,-0,1,
                                 -0,-1,0,
                                 1,-0,-0);

    wr3__wrist_2.setIdentity();
    eg_set_position(wr3__wrist_2,0.0825,0,0);
    eg_set_rotation(wr3__wrist_2,-0,0,1,
                                 0,1,0,
                                 -1,0,-0);

    wrist_1__wr2.setIdentity();
    eg_set_position(wrist_1__wr2,0,0,-0.09475);
    eg_set_rotation(wrist_1__wr2,0,0,1,
                                 0,-1,0,
                                 1,0,0);

    wrist_2__wr3.setIdentity();
    eg_set_position(wrist_2__wr3,0,0,-0.0825);
    eg_set_rotation(wrist_2__wr3,0,0,-1,
                                 0,1,0,
                                 1,0,-0);

}

void ur5::solver1(const ModelConstants& mc, const joint_state& q, const joint_state& qd, kul::pose_t& wrist_3__base, kul::twist_t& v__wrist_3__base, Jacobian_t& J_wrist_3_base)
{
    pose_t elbow__forearm;
    pose_t forearm__elbow;
    pose_t shoulder__shoulder_pan;
    pose_t shoulder_lift__upperarm;
    pose_t upperarm__shoulder_lift;
    pose_t wr1__wrist_1;
    pose_t wr2__wrist_2;
    pose_t wr3__wrist_3;
    pose_t wrist_1__wr1;
    pose_t wrist_2__wr2;
    pose_t wrist_3__wr3;

    rot_z__b_x_a(q(2), elbow__forearm);
    rot_z__a_x_b(q(2), forearm__elbow);
    rot_z__a_x_b(q(0), shoulder__shoulder_pan);
    rot_z__b_x_a(q(1), shoulder_lift__upperarm);
    rot_z__a_x_b(q(1), upperarm__shoulder_lift);
    rot_z__b_x_a(q(3), wr1__wrist_1);
    rot_z__b_x_a(q(4), wr2__wrist_2);
    rot_z__b_x_a(q(5), wr3__wrist_3);
    rot_z__a_x_b(q(3), wrist_1__wr1);
    rot_z__a_x_b(q(4), wrist_2__wr2);
    rot_z__a_x_b(q(5), wrist_3__wr3);

    pose_t shoulder_lift__shoulder_pan = shoulder__shoulder_pan * mc.shoulder_lift__shoulder;
    pose_t shoulder_lift__base = mc.shoulder_pan__base * shoulder_lift__shoulder_pan;
    pose_t elbow__shoulder_lift = upperarm__shoulder_lift * mc.elbow__upperarm;
    pose_t elbow__base = shoulder_lift__base * elbow__shoulder_lift;
    pose_t wr1__elbow = forearm__elbow * mc.wr1__forearm;
    pose_t wr1__base = elbow__base * wr1__elbow;
    pose_t wr2__wr1 = wrist_1__wr1 * mc.wr2__wrist_1;
    pose_t wr2__base = wr1__base * wr2__wr1;
    pose_t wr3__wr2 = wrist_2__wr2 * mc.wr3__wrist_2;
    pose_t wr3__base = wr2__base * wr3__wr2;
    pose_t forearm__wrist_1 = wr1__wrist_1 * mc.forearm__wr1;
    pose_t upperarm__forearm = elbow__forearm * mc.upperarm__elbow;
    pose_t wrist_2__wrist_3 = wr3__wrist_3 * mc.wrist_2__wr3;
    pose_t shoulder__upperarm = shoulder_lift__upperarm * mc.shoulder__shoulder_lift;
    pose_t wrist_1__wrist_2 = wr2__wrist_2 * mc.wrist_1__wr2;
    wrist_3__base = wr3__base * wrist_3__wr3;

    twist_t v__shoulder__base = twist_t::Zero();
    v__shoulder__base[AZ] = qd(0);

    twist_t v__upperarm__base;
    ct_twist( shoulder__upperarm, v__shoulder__base, v__upperarm__base );
    v__upperarm__base[AZ] += qd[1];
    twist_t v__forearm__base;
    ct_twist( upperarm__forearm, v__upperarm__base, v__forearm__base );
    v__forearm__base[AZ] += qd[2];
    twist_t v__wrist_1__base;
    ct_twist( forearm__wrist_1, v__forearm__base, v__wrist_1__base );
    v__wrist_1__base[AZ] += qd[3];
    twist_t v__wrist_2__base;
    ct_twist( wrist_1__wrist_2, v__wrist_1__base, v__wrist_2__base );
    v__wrist_2__base[AZ] += qd[4];

    ct_twist( wrist_2__wrist_3, v__wrist_2__base, v__wrist_3__base );
    v__wrist_3__base[AZ] += qd[5];

    position_t poi_J_wrist_3_base = eg_get_position(wrist_3__base);

    geometricJacobianColumn_revolute(
      poi_J_wrist_3_base,
      eg_get_position(mc.shoulder_pan__base),
      eg_get_zaxis(mc.shoulder_pan__base),
      J_wrist_3_base.col(0) );
    geometricJacobianColumn_revolute(
      poi_J_wrist_3_base,
      eg_get_position(shoulder_lift__base),
      eg_get_zaxis(shoulder_lift__base),
      J_wrist_3_base.col(1) );
    geometricJacobianColumn_revolute(
      poi_J_wrist_3_base,
      eg_get_position(elbow__base),
      eg_get_zaxis(elbow__base),
      J_wrist_3_base.col(2) );
    geometricJacobianColumn_revolute(
      poi_J_wrist_3_base,
      eg_get_position(wr1__base),
      eg_get_zaxis(wr1__base),
      J_wrist_3_base.col(3) );
    geometricJacobianColumn_revolute(
      poi_J_wrist_3_base,
      eg_get_position(wr2__base),
      eg_get_zaxis(wr2__base),
      J_wrist_3_base.col(4) );
    geometricJacobianColumn_revolute(
      poi_J_wrist_3_base,
      eg_get_position(wr3__base),
      eg_get_zaxis(wr3__base),
      J_wrist_3_base.col(5) );

}

