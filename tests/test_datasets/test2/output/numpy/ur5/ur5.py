# This file was automatically generated by the ILK-compiler on Wed Apr 10 12:42:45 2019

import math
import numpy as np
import numpy.linalg as nplin
from collections import namedtuple

from ilknumpy import backend as backend

def ModelConstants():
    elbow__upperarm = backend.pose()
    backend.setPosition(elbow__upperarm,0.425,0,-0.1197)
    backend.setRotation(elbow__upperarm,1,-0,0,
                                 0,1,-0,
                                 0,0,1)

    forearm__wr1 = backend.pose()
    backend.setPosition(forearm__wr1,-0.39225,0,-0.09315)
    backend.setRotation(forearm__wr1,1,-0,0,
                                 0,1,-0,
                                 0,0,1)

    shoulder__shoulder_lift = backend.pose()
    backend.setPosition(shoulder__shoulder_lift,0,0,-0.13585)
    backend.setRotation(shoulder__shoulder_lift,0,-0,1,
                                 -0,-1,0,
                                 1,-0,-0)

    shoulder_lift__shoulder = backend.pose()
    backend.setPosition(shoulder_lift__shoulder,0.13585,0,0)
    backend.setRotation(shoulder_lift__shoulder,0,-0,1,
                                 -0,-1,0,
                                 1,-0,-0)

    shoulder_pan__base = backend.pose()
    backend.setPosition(shoulder_pan__base,0,0,0.089159)
    backend.setRotation(shoulder_pan__base,1,-0,0,
                                 0,1,-0,
                                 0,0,1)

    upperarm__elbow = backend.pose()
    backend.setPosition(upperarm__elbow,-0.425,0,0.1197)
    backend.setRotation(upperarm__elbow,1,-0,0,
                                 0,1,-0,
                                 0,0,1)

    wr1__forearm = backend.pose()
    backend.setPosition(wr1__forearm,0.39225,0,0.09315)
    backend.setRotation(wr1__forearm,1,-0,0,
                                 0,1,-0,
                                 0,0,1)

    wr2__wrist_1 = backend.pose()
    backend.setPosition(wr2__wrist_1,0.09475,0,0)
    backend.setRotation(wr2__wrist_1,0,-0,1,
                                 -0,-1,0,
                                 1,-0,-0)

    wr3__wrist_2 = backend.pose()
    backend.setPosition(wr3__wrist_2,0.0825,0,0)
    backend.setRotation(wr3__wrist_2,-0,0,1,
                                 0,1,0,
                                 -1,0,-0)

    wrist_1__wr2 = backend.pose()
    backend.setPosition(wrist_1__wr2,0,0,-0.09475)
    backend.setRotation(wrist_1__wr2,0,0,1,
                                 0,-1,0,
                                 1,0,0)

    wrist_2__wr3 = backend.pose()
    backend.setPosition(wrist_2__wr3,0,0,-0.0825)
    backend.setRotation(wrist_2__wr3,0,0,-1,
                                 0,1,0,
                                 1,0,-0)


    mc_config = namedtuple('mc', [
    'elbow__upperarm',
    'forearm__wr1',
    'shoulder__shoulder_lift',
    'shoulder_lift__shoulder',
    'shoulder_pan__base',
    'upperarm__elbow',
    'wr1__forearm',
    'wr2__wrist_1',
    'wr3__wrist_2',
    'wrist_1__wr2',
    'wrist_2__wr3',
    ])

    mc = mc_config(
    elbow__upperarm = elbow__upperarm,
    forearm__wr1 = forearm__wr1,
    shoulder__shoulder_lift = shoulder__shoulder_lift,
    shoulder_lift__shoulder = shoulder_lift__shoulder,
    shoulder_pan__base = shoulder_pan__base,
    upperarm__elbow = upperarm__elbow,
    wr1__forearm = wr1__forearm,
    wr2__wrist_1 = wr2__wrist_1,
    wr3__wrist_2 = wr3__wrist_2,
    wrist_1__wr2 = wrist_1__wr2,
    wrist_2__wr3 = wrist_2__wr3,
    )
    return mc

def solver1(mc, q, qd):

    elbow__forearm = backend.rot_z__b_x_a(q[2])
    forearm__elbow = backend.rot_z__a_x_b(q[2])
    shoulder__shoulder_pan = backend.rot_z__a_x_b(q[0])
    shoulder_lift__upperarm = backend.rot_z__b_x_a(q[1])
    upperarm__shoulder_lift = backend.rot_z__a_x_b(q[1])
    wr1__wrist_1 = backend.rot_z__b_x_a(q[3])
    wr2__wrist_2 = backend.rot_z__b_x_a(q[4])
    wr3__wrist_3 = backend.rot_z__b_x_a(q[5])
    wrist_1__wr1 = backend.rot_z__a_x_b(q[3])
    wrist_2__wr2 = backend.rot_z__a_x_b(q[4])
    wrist_3__wr3 = backend.rot_z__a_x_b(q[5])

    shoulder_lift__shoulder_pan = shoulder__shoulder_pan @ mc.shoulder_lift__shoulder
    shoulder_lift__base = mc.shoulder_pan__base @ shoulder_lift__shoulder_pan
    elbow__shoulder_lift = upperarm__shoulder_lift @ mc.elbow__upperarm
    elbow__base = shoulder_lift__base @ elbow__shoulder_lift
    wr1__elbow = forearm__elbow @ mc.wr1__forearm
    wr1__base = elbow__base @ wr1__elbow
    wr2__wr1 = wrist_1__wr1 @ mc.wr2__wrist_1
    wr2__base = wr1__base @ wr2__wr1
    wr3__wr2 = wrist_2__wr2 @ mc.wr3__wrist_2
    wr3__base = wr2__base @ wr3__wr2
    forearm__wrist_1 = wr1__wrist_1 @ mc.forearm__wr1
    upperarm__forearm = elbow__forearm @ mc.upperarm__elbow
    wrist_2__wrist_3 = wr3__wrist_3 @ mc.wrist_2__wr3
    shoulder__upperarm = shoulder_lift__upperarm @ mc.shoulder__shoulder_lift
    wrist_1__wrist_2 = wr2__wrist_2 @ mc.wrist_1__wr2
    wrist_3__base = wr3__base @ wrist_3__wr3

    v__shoulder__base = np.zeros(6)
    v__shoulder__base[2] = qd[0] 

    v__upperarm__base = np.zeros(6)
    backend.ct_twist( shoulder__upperarm, v__shoulder__base, v__upperarm__base )
    v__upperarm__base[2] += qd[1]
    v__forearm__base = np.zeros(6)
    backend.ct_twist( upperarm__forearm, v__upperarm__base, v__forearm__base )
    v__forearm__base[2] += qd[2]
    v__wrist_1__base = np.zeros(6)
    backend.ct_twist( forearm__wrist_1, v__forearm__base, v__wrist_1__base )
    v__wrist_1__base[2] += qd[3]
    v__wrist_2__base = np.zeros(6)
    backend.ct_twist( wrist_1__wrist_2, v__wrist_1__base, v__wrist_2__base )
    v__wrist_2__base[2] += qd[4]
    v__wrist_3__base = np.zeros(6)
    backend.ct_twist( wrist_2__wrist_3, v__wrist_2__base, v__wrist_3__base )
    v__wrist_3__base[2] += qd[5]

    J_wrist_3_base = backend.np.zeros([6,6])
    poi_J_wrist_3_base = backend.positionView(wrist_3__base)

    backend.geometricJacobianColumn_revolute(
      poi_J_wrist_3_base,
      backend.positionView(mc.shoulder_pan__base),
      backend.zaxisView(mc.shoulder_pan__base),
      J_wrist_3_base[:,0] )
    backend.geometricJacobianColumn_revolute(
      poi_J_wrist_3_base,
      backend.positionView(shoulder_lift__base),
      backend.zaxisView(shoulder_lift__base),
      J_wrist_3_base[:,1] )
    backend.geometricJacobianColumn_revolute(
      poi_J_wrist_3_base,
      backend.positionView(elbow__base),
      backend.zaxisView(elbow__base),
      J_wrist_3_base[:,2] )
    backend.geometricJacobianColumn_revolute(
      poi_J_wrist_3_base,
      backend.positionView(wr1__base),
      backend.zaxisView(wr1__base),
      J_wrist_3_base[:,3] )
    backend.geometricJacobianColumn_revolute(
      poi_J_wrist_3_base,
      backend.positionView(wr2__base),
      backend.zaxisView(wr2__base),
      J_wrist_3_base[:,4] )
    backend.geometricJacobianColumn_revolute(
      poi_J_wrist_3_base,
      backend.positionView(wr3__base),
      backend.zaxisView(wr3__base),
      J_wrist_3_base[:,5] )


    return wrist_3__base, v__wrist_3__base, J_wrist_3_base


