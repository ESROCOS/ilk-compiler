--[[
  ilk-header-eigen.lua
   Module for generating header file code of an ilk
   program in C++ -- using Eigen3
   Enea Scioni, <enea.scioni@kuleuven.be>
   2018, KU Leuven, Belgium.
   License: BSD2-clause
--]]

local utils = require('utils')
local constants = require('ilk.constants')
local common = require('ilk.common')

local M = {}

local function header_eigen(config, idx)
    local fd = config.fd or io.stdout
    local idx = idx or 0
    local filename_define = config.filename:upper()
    filename_define = filename_define:gsub("-", "_")
    local ok, res = utils.preproc([[
/*
 * $(filename).h:
 * This file has been autogenerated by IR-GEN tool
 * (2018, KU Leuven, Belgium)
 * 
 * License: BSD 2-clause
 */
#ifndef _ILK_GEN_$(filename_define)_H_
#define _ILK_GEN_$(filename_define)_H_

#include <ilk/eigen/core-types.h>
#include <ilk/eigen/joint-transforms.h>
#include <ilk/eigen/ik.h>
#include "robot-defs.h"

]], {
        table = table,
        filename = config.filename,
        filename_define = filename_define
    })
    if not ok then error(res) end
    fd:write(res)
end

local function header_footer_eigen(config, idx)
    local fd = config.fd or io.stdout
    local idx = idx or 0
    local filename_define = config.filename:upper()
    filename_define = filename_define:gsub("-", "_")
    local ok, res = utils.preproc([[
    

#endif //! _ILK_GEN_$(filename)_H_
  ]], { table = table, filename = filename_define })
    if not ok then error(res) end
    fd:write(res)
end

local function header_model_config_eigen(config, args, idx)
    local fd = config.fd or io.stdout
    local idx = idx or 0
    local model_const_type = constants.backend_namespace..'::pose_t'

    local model_const_identifiers = common.extract_identifiers_in_order(args.model_values)

    local ok, res = utils.preproc([[
struct mc_$(sname) {
$(space)mc_$(sname)();

@for i,v in pairs(vars) do
$(space)$(model_const_type) $(v);
@end
};

]], {
        table = table,
        pairs = pairs,
        model_const_type = model_const_type,
        sname = args.sname,
        vars = model_const_identifiers,
        space = utils.gen_spaces('\t', idx)
    })
    if not ok then error(res) end
    fd:write(res)
end

M.header = header_eigen
M.footer = header_footer_eigen
M.model_config = header_model_config_eigen

return M
